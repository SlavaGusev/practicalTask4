const Logger = require("../../logger");

module.exports = class BddUtil {
  /**
   * Get case id from tag expression
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {String} case id
   */
  static getCaseIdFromTag(testCase) {
    return testCase.pickle.tags
      .map((obj) => obj.name)
      .filter((name) => name.startsWith("@C"))
      .toString()
      .replace(/\D/g, "");
  }

  /**
   * Get case id from scenario name with structure 'C<caseId> <scenario name>' (for example: C4015 Login to Jaguar as a user without entitlements)
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {String} case id
   */
  static getCaseIdFromScenarioName(testCase) {
    return testCase.pickle.name.split(" ")[0].replace(/\D/g, "");
  }

  /**
   * Get defect id from tag in format
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {String} defect id
   */
  static getDefectIdFromTag(testCase) {
    return testCase.pickle.tags
      .map((obj) => obj.name)
      .filter((name) => name.startsWith("@BUG"))
      .toString()
      .replace("@BUG-", "");
  }

  /**
   * Get steps description from scenario
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {String} steps description
   */
  static getStepsFromScenario(testCase) {
    const caseSteps = testCase.pickle.steps.map(
      ({ id, type, astNodeIds, ...stepDescription }) => stepDescription
    );
    let stepsDescription = "";
    Logger.info(
      `Getting steps description from the scenario: ${JSON.stringify(
        caseSteps
      )}`
    );
    for (let obj of caseSteps) {
      stepsDescription += `${obj["keyword"] + obj["text"]}\n`;
    }
    return stepsDescription;
  }

  /**
   * Get separated steps array description from scenario
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {Array} steps description
   */
   static getSeparatedStepsFromScenario(testCase) {
    const caseSteps = testCase.pickle.steps.map(
      ({ id, type, astNodeIds, ...stepDescription }) => stepDescription
    );
    let stepsSeparatedDescription = [];
    for (let obj of caseSteps) {
      let step = {"content": `${obj["keyword"] + obj["text"]}`}
      stepsSeparatedDescription.push(step);
    }
    return stepsSeparatedDescription;
  }

  /**
   * Get section id from tag
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @returns {String} section id
   */
  static getSectionIdFromTag(testCase) {
    return testCase.pickle.tags
      .map((obj) => obj.name)
      .filter((name) => name.startsWith("@S"))
      .toString()
      .replace(/\D/g, "");
  }

  /**
   * Check if scenario has a tag 
   * @param {Object} testCase testCase Object generated by wdio (can be accessed through hooks)
   * @param {String} tagName Name of the tag to check
   * @returns {Boolean} result of check
   */
   static checkTag(testCase, tagName) {
    const tagsFiltered = testCase.pickle.tags
      .map((obj) => obj.name)
    return tagsFiltered.includes(tagName);
  }
};
